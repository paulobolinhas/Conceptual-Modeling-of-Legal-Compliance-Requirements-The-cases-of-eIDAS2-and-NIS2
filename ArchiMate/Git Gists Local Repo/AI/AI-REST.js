/*
 * AI Support package
 * 
 * Requires:
 *   * jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * 
 *  Gemini API Key - https://ai.google.dev/gemini-api/docs/api-key
 *  ChatGPT Key - https://platform.openai.com/docs/overview
 * 
 * Version 1: Gemini API
 * Version 2: Chat GPT + REST API usage
 * 
 * (c) 2025 Steven Mileham
 *
 */

const gptKey = "{{INSERT KEY HERE}}";

const gptEndpoint = "https://api.openai.com/v1/responses";

const geminiKey = "AIzaSyBLlMzSCKL2RA_ySw1BV5uofRAMQWZ-hAY";

const geminiEndpoint = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent";

const engine = "Gemini"; // "Gemini" or "GPT"

console.log("Loaded AI REST Package");

console.log("Loaded AI REST Package");

function callApi(url, payload) {

    var imports = new JavaImporter(java.net, java.util, java.lang, java.io);
    var apiResult = "";
    let result= {};

    with (imports) {

        var urlObj = new URL(url);
        var hcon = urlObj.openConnection();

        hcon.setRequestMethod("POST");
        hcon.setDoOutput(true);

        // Set request headers
        hcon.setRequestProperty("Content-Type", "application/json");
        hcon.setRequestProperty("Accept", "application/json");
        hcon.setRequestProperty("Accept-Charset", "UTF-8");
        if (engine == "Gemini") {
            hcon.setRequestProperty("x-goog-api-key", geminiKey);
        }
        else if (engine == "GPT") {
            hcon.setRequestProperty("Authorization", `Bearer ${gptKey}`);
        }

        try {
            var output = new OutputStreamWriter(hcon.getOutputStream());
            output.write(JSON.stringify(payload));
            output.flush();
            output.close();
        } catch(e) {
            console.setTextColor(255,0,0);
            console.log("Error writing POST data:");
            console.log(e);
            exit();
        }

        try {
            var reader = new BufferedReader(new InputStreamReader(hcon.getInputStream()));

            var line = reader.readLine();
            while (line != null) {
                apiResult += line + "\n";
                line = reader.readLine();
            }
            reader.close();
            result = JSON.parse(apiResult);
            if (!result.candidates && !result.output[0]) {
                console.log ("Error");
            }
        } catch (e) {
            console.setTextColor(255, 0, 0);
            console.log("HTTPS error:");
            console.log(e);
            console.log(hcon.getHeaderFields());
            exit();
        }
    }
    console.setDefaultTextColor();
    return result;

}

const sendToAI = (thePrompt) => {

    if (engine == "Gemini") {
        console.log("Asking Gemini");
        let data = {
        "contents" : {
            "parts" : [
                {
                    "text": thePrompt
                }
                ]
            }
        };

        let aiOutput = callApi(geminiEndpoint,data).candidates[0].content.parts[0].text;
        return `${aiOutput}\n\nGenerated by Gemini ${new Date().toLocaleString()}`;
    }
    else if (engine == "GPT") {
        console.log("Asking ChatGPT");
        let data = {
            "model": "gpt-4.1",
            "input": thePrompt  
            };
        let aiOutput = callApi(gptEndpoint,data).output[0].content[0].text;
        return `${aiOutput}\n\nGenerated by ChatGPT ${new Date().toLocaleString()}`;
    }
}

module.exports=sendToAI;