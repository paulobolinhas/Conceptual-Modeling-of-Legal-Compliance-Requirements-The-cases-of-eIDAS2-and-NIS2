/*
 * Generate AI Documentation (Requires AI-Gemini.js and Export To Markdown.ajs)
 * 
 * Requires:
 *   * jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *   * AI-REST.js - Package to support connections to LLM (Gemini/GPT)
 *   * Export to Markdown.ajs - https://gist.github.com/smileham/578bbbb88dc0ed5a1403f3b98711ec25
 * 
 * 
 * Version 1: Gemini API
 * 
 * (c) 2025 Steven Mileham
 *
*/

console.show();
console.clear();
console.log("Generate AI Summary");

const library = true;

const md = require('../Export To MarkDown.ajs');
const ai = require('./AI-REST.js');
const persona = `As a friendly Enterprise Architect trained in TOGAF and ArchiMate`;
const viewPromptTemplate = `${persona}, using language which can be understood by the business in British English, summarise the following documentation into no more than two paragraphs.  Do not greet the user, the summary will be stored against the document for future users:\n`;
const componentPromptTemplate = `${persona}, using language which can be understood by the business in British English, summarise the following component into no one sentence, include product details if this is a application, service or device.  Do not greet the user, the summary will be stored against the component for future users`;

const theComponents = $(selection);
const theViews = theComponents.filter("archimate-diagram-model");

function buttonDialog(message,options) {
    var dialog = new org.eclipse.jface.dialogs.MessageDialog(shell,"Archi",null,message,3,options.concat(["Cancel"]),0);
    
    var result=dialog.open();
    return result==options.length?null:(result+1).toString();
}

if (theViews && theViews.length>0) {
    theViews.each(function(theView){

        console.log(`Generating Summary for view:${theView}`);

        theDocument = "";
        let markdownContent = md(theView, false,false, false, true);

        summary = summariseMarkdownToAI (markdownContent);
        var updateDocumentation = buttonDialog(`View:${theView.name}\nNew Documentation:\n${summary}`, ["Replace Documentation", "Append Documentation"]);
        if (updateDocumentation=="2") {
            theView.documentation += `\n${summary}`;
        } 
        else if (updateDocumentation=="1") {
            theView.documentation = summary;
        }
    });
}
else {
    theComponents.forEach(theComponent => {
    console.log(`Generating Summary for component:${theComponent.name}`);

    summary = generateDocumentation (theComponent);

    var updateDocumentation = buttonDialog(`Component:${theComponent.name}\nNew Documentation:\n${summary}`, ["Replace Documentation", "Append Documentation"]);
    if (updateDocumentation=="2") {
        theComponent.documentation += `\n${summary}`;
    } 
    else if (updateDocumentation=="1") {
        theComponent.documentation = summary;
    }
});

}

function generateDocumentation (theComponent) {
    let componentPrompt = `Component Name: \"${theComponent.name}\", Component Type: \"${theComponent.type}\"${(theComponent.specialization!=null?", Component Specialisation: \""+theComponent.specialization+"\"":"")}${(theComponent.documentation!=""&&theComponent.documentation!=null)?", Current Documentation: \""+theComponent.documentation+"\"":""}`
    theComponent.prop().forEach(function (prop) {
        componentPrompt+=` Property: "${prop}" = "${theComponent.prop(prop)}",`;
    })
    return ai(`${componentPromptTemplate}:\n ${componentPrompt}`);
}

function summariseMarkdownToAI (markdownContent) {
   return ai(viewPromptTemplate+markdownContent)
}