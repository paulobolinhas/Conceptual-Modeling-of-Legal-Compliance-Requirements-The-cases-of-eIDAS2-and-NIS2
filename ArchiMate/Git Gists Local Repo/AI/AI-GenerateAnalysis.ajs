/*
 * Generate AI Analysis (Requires AI-REST.js and Export To Markdown.ajs)
 * 
 * Requires:
 *   * jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *   * AI-REST.js - Package to support connections to LLM (Gemini/GPT)
 *   * Export to Markdown.ajs - https://gist.github.com/smileham/578bbbb88dc0ed5a1403f3b98711ec25
 * 
 * Version 1: Gemini API
 * Version 1.1: Updated to add Analysis to the view, support for "diagram" components
 * 
 * (c) 2025 Steven Mileham
 *
*/

console.show();
console.clear();
console.log("Generate AI Summary");

const library = true;

const promptTemplate = "As a friendly Enterprise Architect trained in TOGAF and ArchiMate, using language which can be understood by the business in British English, analyse the following component. Do not greet the user, the summary will be stored against the component for future users, summarise the analysis in no more than two paragraphs";

const md = require('../Export To MarkDown.ajs');
const ai = require('./AI-REST.js');

const theComponents = $(selection);

function buttonDialog(message,options) {
    var dialog = new org.eclipse.jface.dialogs.MessageDialog(shell,"Archi",null,message,3,options.concat(["Cancel"]),0);
    
    var result=dialog.open();
    return result==options.length?null:(result+1).toString();
}

const theView = theComponents.parents("archimate-diagram-model")[0]
if (theView) {
    console.log(theView);

    let markdownContent = md(theView, false,false, false, true);

    theComponents.forEach(theComponent => {
        console.log(`Generating Summary for component:${theComponent.name}`);

        summary = generateAnalysis (theComponent,markdownContent);

        let updateDocumentation = buttonDialog(`Component:${theComponent.name}\nAnalysis:\n${summary}`, ["Replace Documentation", "Append to Documentation", "Create Assessment"]);
        
        if (updateDocumentation=="3") {
            let theAnalysis = model.createElement("assessment", `Analysis for ${theComponent.name}`);
            theAnalysis.documentation = summary;
            if (!theComponent.type.contains("model")) {
                let theRelationship = model.createRelationship("association-relationship", "", theComponent.concept, theAnalysis);
                let theVisualAnalysis = theView.add(theAnalysis, 0,0,-1,-1);
                let theVisualRelationship = theView.add(theRelationship, theComponent, theVisualAnalysis);
            }
            else
            {
                let theVisualAnalysis = theView.add(theAnalysis, 0,0, -1, -1);
                theView.createConnection(theComponent,theVisualAnalysis);
            }
        }
        else if (updateDocumentation=="2") {
            theComponent.documentation += `\n${summary}`;
        } 
        else if (updateDocumentation=="1") {
            theComponent.documentation = summary;
        }
    });
}
else {
    console.log("Please select a component.");
}


function generateAnalysis (theComponent,theContext) {
    let componentPrompt = "";
    if (!theComponent.type.contains("model-note")) {
        componentPrompt = `Component Name: \"${theComponent.name}\", Component Type: \"${theComponent.type}\"${(theComponent.specialization!=null?", Component Specialisation: \""+theComponent.specialization+"\"":"")}${(theComponent.documentation!=""&&theComponent.documentation!=null)?", Current Documentation: \""+theComponent.documentation+"\"":""}`
        theComponent.prop().forEach(function (prop) {
            componentPrompt+=` Property: "${prop}" = "${theComponent.prop(prop)}",`;
        })
    }
    else {
        componentPrompt = `"Note: "${theComponent.text}"`;
    }
    return ai(`${promptTemplate}, analyse ${componentPrompt} in the context of:\n ${theContext}`);
    
}