/*
 * Generate AI Custom Prompt (Requires AI-Gemini.js and Export To Markdown.ajs)
 * 
 * Requires:
 *   * jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *   * AI-Gemini.js - 
 *   * Export to Markdown.ajs - https://gist.github.com/smileham/578bbbb88dc0ed5a1403f3b98711ec25
 * 
 * Version 1: Gemini API
 * 
 * (c) 2025 Steven Mileham
 *
*/

console.show();
console.clear();
console.log("Generate AI Custom Prompt");

const library = true;

const md = require('../Export To MarkDown.ajs');
const ai = require('./AI-REST.js');
let persona = `You work as a friendly Enterprise Architect trained in TOGAF and ArchiMate`;
let suffix = `Do not greet the user, the response will be stored against the view for future users`;

const theViews = $(selection).filter("archimate-diagram-model");

function buttonDialog(message,options) {
    var dialog = new org.eclipse.jface.dialogs.MessageDialog(shell,"Archi",null,message,3,options.concat(["Cancel"]),0);
    
    var result=dialog.open();
    return result==options.length?null:(result+1).toString();
}

if (!theViews || theViews.length==0) {
    console.log("> Please Select a View");
}

const theIndexMap = new Map();

persona = window.prompt("Enter Persona", persona);
if (persona == null) {
    console.log("Persona dialog cancelled. Exiting.");
    exit();
}
let prompt = window.prompt("Enter Prompt", "");
if (prompt == null) {
    console.log("Prompt dialog cancelled. Exiting.");
    exit();
}
suffix =  window.prompt("Enter Suffix", suffix);
if (suffix == null) {
    console.log("Suffix dialog cancelled. Exiting.");
    exit();
}

const thePrompt = `${persona}, ${prompt}. ${suffix}`;

theViews.each(function(theView){

    console.log(`Generating Custom Prompt for view:${theView.name}`);

    theDocument = "";
    let markdownContent = md(theView, false,false, false, true);

    summary = generateResponse (thePrompt, markdownContent);
    var updateDocumentation = buttonDialog(`View:${theView.name}\nResponse:\n${summary}`, ["Replace Documentation", "Append to Documentation", "Create Assessment"]);
    if (updateDocumentation=="3") {
        let theAnalysis = model.createElement("assessment", `Response for ${theView.name}`);
        theAnalysis.documentation = `${thePrompt}\n\n${summary}`;
        theView.add(theAnalysis, 10, 200, -1, -1, true);
    }
    else if (updateDocumentation=="2") {
        theView.documentation += `\n${summary}`;
    } 
    else if (updateDocumentation=="1") {
        theView.documentation = summary;
    }
});

function generateResponse (prompt, markdownContent) {
    return ai(prompt+markdownContent);
}