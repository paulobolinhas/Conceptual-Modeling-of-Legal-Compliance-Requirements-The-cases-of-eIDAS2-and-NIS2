/*
 * Generate AI Critique (Requires AI-Gemini.js and Export To Markdown.ajs)
 * 
 * Requires:
 *   * jArchi – https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *   * AI-REST.js – Package to support connections to LLM (Gemini/GPT)
 *   * Export to Markdown.ajs – https://gist.github.com/smileham/578bbbb88dc0ed5a1403f3b98711ec25
 * 
 * Version 1: Gemini API
 * 
 * (c) 2025 Steven Mileham
 *
*/

console.show();
console.clear();
console.log("Generate AI Summary");

const library = true;

const md = require('../Export To MarkDown.ajs');
const ai = require('./AI-REST.js');

const promptTemplate = "You are three Enterprise Architects trained in TOGAF and ArchiMate, one critical, one friendly and one neutral, using language which can be understood by the business in British English, critique the following architecture, highlight areas for improvement, missed opportunities and any gaps.  Do not greet the user, summarise your output into no more than three paragraphs:\n";

const theViews = $(selection).filter("archimate-diagram-model");

function buttonDialog(message,options) {
    var dialog = new org.eclipse.jface.dialogs.MessageDialog(shell,"Archi",null,message,3,options.concat(["Cancel"]),0);
    
    var result=dialog.open();
    return result==options.length?null:(result+1).toString();
}

if (!theViews || theViews.length==0) {
    console.log("> Please Select a View");
}

const theIndexMap = new Map();

theViews.each(function(theView){

    console.log(`Generating Critique for view:${theView}`);

    theDocument = "";
    let markdownContent = md(theView, false,false, false, true);

    summary = generateCritique (markdownContent);
    var updateDocumentation = buttonDialog(`View:${theView.name}\nCritique:\n${summary}`, ["Replace Documentation", "Append to Documentation", "Create Assessment"]);
    if (updateDocumentation=="3") {
        let theAnalysis = model.createElement("assessment", `Critique for ${theView.name}`);
        theAnalysis.documentation = summary;
        theView.add(theAnalysis, 10, 200, -1, -1, true);
    }
    else if (updateDocumentation=="2") {
        theView.documentation += `\n${summary}`;
    } 
    else if (updateDocumentation=="1") {
        theView.documentation = summary;
    }
});

function generateCritique (markdownContent) {
    return ai(promptTemplate+markdownContent);
}